import Head from 'next/head'
import { io } from "socket.io-client";
import { useEffect, useState } from 'react';
import styles from '../styles/index.module.scss'
import { BsFillGearFill } from "react-icons/bs";
import { ImSwitch } from 'react-icons/im'
export const getServerSideProps = async () => {
  const sensorsSSR = await fetch('http://localhost:4000/api/sensors').then(res => res.json())
  return (
    {
      props: {
        sensorsSSR
      }
    }
  )

}

export default function Home({ sensorsSSR }) {
  const [socket, setSocket] = useState()
  const [data, setData] = useState()
  const [sensorId, setSensorId] = useState()
  const [sensorsData, setSensorsData] = useState(sensorsSSR)

  /*   useEffect(() => {
      console.log("sensorsData: ", sensorsData)
      if (sensorsData && sensorsData.count !== 0) {
        sensorsData?.data.map(sensor => {
          const conn = io(`http://localhost:4000/sensors/${sensor.sensor_id}/data/`, {
            reconnection: false
          })
          conn.on('connect', () => {
            console.log("Web client connected to ws server!")
            console.log(conn)
            conn.on('web_getSensorsData', (data) => {
              console.log('Received sensors data: ', data)
            })
            conn.on('web_sensorStatusUpdate', (data) => {
              console.log('SensorStatusUpdate', data)
            })
          })
          // get data for all sensors
    
          conn.on("disconnect", () => {
            console.log(`Disconnected...`)
            console.log(conn)
          })
        })
      }
    }, []) */

  useEffect(() => {

    if (socket) {
      socket.on('connect', () => {
        console.log("Web client connected to ws server!")
        console.log(socket)
        socket.on('web_getSensorsData', (data) => {
          console.log('Received sensors data: ', data)
        })
        socket.on('web_sensorStatusUpdate', (data) => {
          console.log('SensorStatusUpdate', data)
        })
      })
      // get data for all sensors

      socket.on("disconnect", () => {
        console.log(`Disconnected...`)
        console.log(socket)
      })

    }

  }, [socket])

  const handleSocketConnect = () => {
    // connect to single sensor
    const conn = io(`http://localhost:4000/sensors/${sensorId}/data/`, {
      reconnection: false
    })
    setSocket(conn)
  }
  const handleSocketDisconnect = () => {
    socket?.disconnect()
  }

  const handleListenAll = async () => {
    const res = await fetch('http://localhost:4000/api/sensors').then(res => res.json())
    console.log(res)
    res.data.forEach(sensor => {
      console.log(sensor)
    });
  }

  const fetchSensorsData = async () => {
    const res = await fetch('http://localhost:4000/api/sensors').then(res => res.json())
    setSensorsData(res)
  }

  const handleStatusChange = async (sensor) => {
    console.log(sensor)
    const res = await fetch(`http://localhost:4000/api/sensors/${sensor.sensor_id}`, { method: 'PUT' }).then(res => res.json())
    console.log(res)
  }
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/*  <input type="text" name="id" onChange={(e) => setSensorId(e.target.value)} placeholder='Sensor ID' />
      <button onClick={handleSocketConnect}>Connect</button>
      <button onClick={handleSocketDisconnect}>Disconnect</button>
      <button onClick={handleListenAll}>Listen All</button> */}
      <div className={"Shell"}>
        {
          sensorsData ?
            <div className={styles.Sensors_wrapper}>
              <h1>Sensor Monitoring System</h1>
              <div className={styles.Sensors_head}>
                <p>Total: {sensorsData.count}</p>
                <p>Last updated: {new Date(sensorsData.requested_at).toLocaleString()}</p>
                <button onClick={fetchSensorsData}>Refresh</button>
              </div>
              <div className={styles.Sensors_content}>
                <h2>Status/ID/Name</h2>

                {
                  sensorsData.data.map((sensor) =>
                    <a key={sensor.id} className={styles.Sensor} href={`/sensor/${sensor.sensor_id}/data`}>
                      <span className={`${styles.Sensor_status} ${sensor.onSocket ?
                        sensor.isActive ? styles.Enabled : styles.Disabled
                        : styles.Inactive}`}></span>
                      <p>{sensor.sensor_id}</p>
                      <p>{sensor.name}</p>
                    </a>
                  )
                }


              </div>
            </div>
            : ""
        }
      </div>



    </div>
  )
}
